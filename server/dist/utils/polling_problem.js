// Generated by CoffeeScript 1.9.3
(function() {
  var Stream, easyimg, fs, get_data, http, log, out, path, process_problem, process_queue, queue, request, requestSync, setAsProblem, utils;

  http = require('http');

  fs = require('fs');

  path = require('path');

  utils = require('../utils/utils');

  request = require('request');

  log = require('winston-color');

  log.level = process.env.LOG_LEVEL;

  easyimg = require('easyimage');

  requestSync = require('sync-request');

  queue = require('./polling_queue');

  Stream = require('stream').Transform;

  get_data = function(id) {
    var dest, jsondata;
    dest = path.join(global.app_root, global.app_config.data_dir, "problem_journal.json");
    jsondata = JSON.parse(fs.readFileSync(dest, 'utf8'));
    fs.writeFileSync(dest, JSON.stringify([]));
    return jsondata;
  };

  setAsProblem = function(item) {
    var done_path, jsondata;
    done_path = path.join(global.app_root, global.app_config.data_dir, 'problem_journal.json');
    jsondata = fs.readFileSync(done_path, 'utf-8');
    jsondata = JSON.parse(jsondata);
    jsondata.push(item);
    return fs.writeFileSync(done_path, JSON.stringify(jsondata));
  };

  process_queue = function(lst, clb) {
    var ref, req, url;
    if (lst.length === 0) {
      clb();
      return;
    }
    url = lst[0].uri;
    log.debug("PROBLEMS QUEUE:  process " + lst[0].type);
    if ((ref = lst[0].type) === 'article-image' || ref === 'cover' || ref === 'page' || ref === 'page-thumb') {
      log.debug("PROBLEMS QUEUE:  request " + lst[0].type + " " + url);
      req = http.get(url, function(res) {
        var out;
        out = new Stream();
        res.on('data', function(chunk) {
          return out.push(chunk);
        });
        return res.on('end', function() {
          console.log('end request');
          fs.writeFileSync(lst[0].path, out.read());
          lst.splice(0, 1);
          return process_queue(lst, clb);
        });
      });
      req.on('socket', function(socket) {
        socket.setTimeout(30000);
        return socket.on('timeout', function() {
          req.abort();
          lst.splice(0, 1);
          return process_queue(lst, clb);
        });
      });
      return req.on('error', function(err) {
        if (err.code === 'ECONNRESET') {
          log.error('Timeout');
          return setAsProblem(lst[0]);
        }
      });
    } else {
      lst.splice(0, 1);
      return process_queue(lst, clb);
    }
  };

  process_problem = function(clb) {
    var jsondata;
    log.debug("Process with problems...");
    jsondata = get_data();
    return process_queue(jsondata, function() {
      console.log('Done!');
      return clb();
    });
  };

  out = {
    process_problem: process_problem
  };

  module.exports = out;

}).call(this);
