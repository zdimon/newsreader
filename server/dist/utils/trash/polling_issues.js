// Generated by CoffeeScript 1.9.3
(function() {
  var check_issue, check_issues, fs, get_new_issues_json, http, log, path, poolling, process_issues, request, utils,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  http = require('http');

  fs = require('fs');

  path = require('path');

  utils = require('../utils/utils');

  request = require('request');

  log = require('winston-color');

  log.level = process.env.LOG_LEVEL;

  log.debug("Importing polling issues module");


  /*
      Function makes a request to server and pass json
      data to the callback function
   */

  get_new_issues_json = function(callback) {
    var options, req;
    options = {
      host: global.remote_host,
      path: "/zd/new.json"
    };
    log.verbose("Getting new issues..." + (options.host + options.path));
    return req = http.get(options, function(res) {
      var out;
      out = '';
      res.on('data', function(chunk) {
        return out = out + chunk;
      });
      return res.on('end', function() {
        var jsdata;
        jsdata = JSON.parse(out);
        return callback(jsdata);
      });
    });
  };


  /*
      Function invokes get_new_issues_json with the callback.
      Process json and creates directories and info.json for every record.
   */

  process_issues = function() {
    return get_new_issues_json(function(jsdata) {
      var cont, dest, issue_covers_dir, issue_dir, issue_page_dir, journal_dir, k, ou, results, v;
      results = [];
      for (k in jsdata) {
        v = jsdata[k];
        journal_dir = path.join(global.app_root, global.app_config.data_dir, 'journals', "" + v.journal_id);
        if (!fs.existsSync(journal_dir)) {
          log.verbose("Creating " + journal_dir);
          fs.mkdirSync(journal_dir);
        }
        issue_dir = path.join(journal_dir, "" + v.id);
        if (!fs.existsSync(issue_dir)) {
          log.verbose("Creating " + issue_dir);
          fs.mkdirSync(issue_dir);
        }
        issue_page_dir = path.join(issue_dir, "pages");
        if (!fs.existsSync(issue_page_dir)) {
          log.verbose("Creating " + issue_page_dir);
          fs.mkdirSync(issue_page_dir);
        }
        issue_covers_dir = path.join(issue_dir, "thumbnails");
        if (!fs.existsSync(issue_covers_dir)) {
          log.verbose("Creating " + issue_covers_dir);
          fs.mkdirSync(issue_covers_dir);
        }
        request(v.thumb).pipe(fs.createWriteStream(issue_dir + "/cover.png")).on('close', function() {});
        dest = path.join(issue_dir, "info.json");
        ou = JSON.stringify(v);
        results.push(cont = fs.writeFileSync(dest, ou));
      }
      return results;
    });
  };

  check_issue = function(iv) {
    var cover_path, info_path, issue_dir, pages_path;
    issue_dir = path.join(global.app_root, global.app_config.data_dir, 'journals', iv.journal_id + "/" + iv.id);
    cover_path = issue_dir + "/cover.png";
    if (!fs.existsSync(cover_path)) {
      return false;
    }
    info_path = issue_dir + "/info.json";
    if (!fs.existsSync(info_path)) {
      return false;
    }
    pages_path = issue_dir + "/pages.json";
    if (!fs.existsSync(pages_path)) {
      return false;
    }
    return true;
  };

  check_issues = function() {
    var cont, dest, dest_pb, done_dir, ik, iv, jk, jsondata, jv, k, ou, problem_issues, ref, ref1, ref2, ref3, v;
    log.debug("Checking issues...");
    dest = path.join(global.app_root, global.app_config.data_dir, "catalog/catalog.json");
    jsondata = JSON.parse(fs.readFileSync(dest, 'utf8'));
    problem_issues = [];
    ref = jsondata.categories;
    for (k in ref) {
      v = ref[k];
      ref1 = v.journals;
      for (jk in ref1) {
        jv = ref1[jk];
        ref2 = jv.issues;
        for (ik in ref2) {
          iv = ref2[ik];
          if (!check_issue(iv)) {
            if (ref3 = iv.id, indexOf.call(problem_issues, ref3) < 0) {
              problem_issues.push(iv);
            }
          } else {
            done_dir = path.join(global.app_root, global.app_config.data_dir, 'journals', iv.journal_id + "/" + iv.id + "/done.dat");
            fs.writeFileSync(done_dir, '');
          }
        }
      }
    }
    dest_pb = path.join(global.app_root, global.app_config.data_dir, 'problem_issue.json');
    ou = JSON.stringify(problem_issues);
    return cont = fs.writeFileSync(dest_pb, ou);
  };

  poolling = {
    process_issues: process_issues,
    check_issues: check_issues,
    check_issue: check_issue
  };

  module.exports = poolling;

}).call(this);
