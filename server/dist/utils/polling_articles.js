// Generated by CoffeeScript 1.9.3
(function() {
  var download_images, fs, get_and_save_article, get_articles_from_server, http, log, manage_with_dirs, path, poolling, process_queue_articles, read_catalog, request, requestSync, utils,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  http = require('http');

  fs = require('fs');

  path = require('path');

  utils = require('../utils/utils');

  request = require('request');

  log = require('winston-color');

  log.level = process.env.LOG_LEVEL;

  log.debug("Importing polling articles module");

  requestSync = require('sync-request');

  read_catalog = function() {
    var cont, dest;
    try {
      dest = path.join(global.app_root, global.app_config.data_dir, "catalog/catalog.json");
      cont = JSON.parse(fs.readFileSync(dest, 'utf8'));
      return cont;
    } catch (_error) {
      return {
        code: 1,
        message: 'file does not exist!'
      };
    }
  };

  download_images = function(jsdata) {
    var i, image_path, image_pathb, j, len, ref, res, results;
    try {
      jsdata = JSON.parse(jsdata);
    } catch (_error) {
      log.error("Wrong json");
      console.log(jsdata);
      return;
    }
    ref = jsdata.articles;
    results = [];
    for (j = 0, len = ref.length; j < len; j++) {
      i = ref[j];
      image_path = path.join(global.app_root, global.app_config.data_dir, "articles", "" + i.journal_id, "" + i.issue_id, i.id + ".png");
      res = requestSync('GET', i.small_image);
      fs.writeFileSync(image_path, res.getBody());
      image_pathb = path.join(global.app_root, global.app_config.data_dir, "articles", "" + i.journal_id, "" + i.issue_id, i.id + "_big.png");
      res = requestSync('GET', i.image);
      fs.writeFileSync(image_pathb, res.getBody());
      results.push(log.debug("ARTICLE: Damn image number " + i.id + " journal " + i.journal_id + " is saved!"));
    }
    return results;
  };

  get_and_save_article = function(url, dest, callback) {
    var req;
    log.debug("ARTICLE: Start loading from " + url);
    req = http.get(url, function(res) {
      var out;
      out = '';
      res.on('data', function(chunk) {
        return out = out + chunk;
      });
      return res.on('end', function() {
        var jsdata;
        jsdata = JSON.parse(out);
        return fs.writeFile(dest, out, function(err) {
          if (err) {
            log.error(err);
          }
          console.log("ARTICLE: End loading file " + dest + " has been saved!");
          return callback(jsdata);
        });
      });
    });
    req.on('socket', function(socket) {
      socket.setTimeout(30000);
      return socket.on('timeout', function() {
        return req.abort();
      });
    });
    return req.on('error', function(err) {
      if (err.code === 'ECONNRESET') {
        return log.error("ARTICLE: timeout " + url);
      }
    });
  };

  manage_with_dirs = function(issue) {
    var issue_dir, journal_dir;
    journal_dir = path.join(global.app_root, global.app_config.data_dir, "articles", "" + issue.journal_id);
    if (!fs.existsSync(journal_dir)) {
      fs.mkdirSync(journal_dir);
    }
    issue_dir = path.join(journal_dir, "" + issue.id);
    if (!fs.existsSync(issue_dir)) {
      return fs.mkdirSync(issue_dir);
    }
  };

  process_queue_articles = function(lst) {
    var dest, dest_done, i, index, j, len, now, out, res, results, url;
    if (lst.length === 0) {
      return;
    }
    results = [];
    for (j = 0, len = lst.length; j < len; j++) {
      i = lst[j];
      index = lst.indexOf(i);
      if (index > -1) {
        dest_done = path.join(global.app_root, global.app_config.data_dir, "articles", i.journal_id + "/" + i.id + "/done.dat");
        if (!fs.existsSync(dest_done)) {
          manage_with_dirs(i);
          url = "http://pressa.ru/zd/txt/" + i.id + ".json";
          log.debug("ARTICLE: loading " + url);
          res = requestSync('GET', url);
          out = res.getBody('utf8');
          dest = path.join(global.app_root, global.app_config.data_dir, "articles", i.journal_id + "/" + i.id + "/articles.json");
          fs.writeFileSync(dest, out, 'utf-8');
          console.log("ARTICLE: file " + dest + " has been saved!");
          download_images(out);
          now = new Date();
          fs.writeFileSync(dest_done, "1");
        }
        lst.splice(index, 1);
        results.push(process_queue_articles(lst));
      } else {
        results.push(void 0);
      }
    }
    return results;
  };

  get_articles_from_server = function() {
    var cat, ik, iv, jk, jv, k, loaded, ref, ref1, ref2, ref3, url, v;
    log.debug("ARTICLES: Reading catalog");
    cat = read_catalog();
    loaded = [];
    ref = cat.categories;
    for (k in ref) {
      v = ref[k];
      ref1 = v.journals;
      for (jk in ref1) {
        jv = ref1[jk];
        ref2 = jv.issues;
        for (ik in ref2) {
          iv = ref2[ik];
          if (iv.has_articles) {
            if (ref3 = iv.id, indexOf.call(loaded, ref3) < 0) {
              url = "http://pressa.ru/zd/txt/" + iv.id + ".json";
              loaded.push(iv);
            }
          }
        }
      }
    }
    return process_queue_articles(loaded);

    /*
        dest = path.join issue_dir, "articles.json"
        if !fs.existsSync dest
            get_and_save_article url,dest, (jsdata)->
                download_images(jsdata)
     */
  };

  poolling = {
    get_articles_from_server: get_articles_from_server,
    get_and_save_article: get_and_save_article
  };

  module.exports = poolling;

}).call(this);
