// Generated by CoffeeScript 1.12.4
(function() {
  var fs, get_new_issues_json, http, log, path, poolling, process_issues, request, utils;

  http = require('http');

  fs = require('fs');

  path = require('path');

  utils = require('../utils/utils');

  request = require('request');

  log = require('winston-color');

  log.level = process.env.LOG_LEVEL;

  log.debug("Importing polling issues module");


  /*
      Function makes a request to server and pass json
      data to the callback function
   */

  get_new_issues_json = function(callback) {
    var options, req;
    options = {
      host: global.remote_host,
      path: "/zd/new.json"
    };
    log.verbose("Getting new issues..." + (options.host + options.path));
    return req = http.get(options, function(res) {
      var out;
      out = '';
      res.on('data', function(chunk) {
        return out = out + chunk;
      });
      return res.on('end', function() {
        var jsdata;
        jsdata = JSON.parse(out);
        return callback(jsdata);
      });
    });
  };


  /*
      Function invokes get_new_issues_json with the callback.
      Process json and creates directories and info.json for every record.
   */

  process_issues = function() {
    return get_new_issues_json(function(jsdata) {
      var cont, dest, issue_covers_dir, issue_dir, issue_page_dir, journal_dir, k, ou, results, v;
      results = [];
      for (k in jsdata) {
        v = jsdata[k];
        journal_dir = path.join(global.app_root, global.app_config.data_dir, 'journals', "" + v.journal_id);
        if (!fs.existsSync(journal_dir)) {
          log.verbose("Creating " + journal_dir);
          fs.mkdirSync(journal_dir);
        }
        issue_dir = path.join(journal_dir, "" + v.id);
        if (!fs.existsSync(issue_dir)) {
          log.verbose("Creating " + issue_dir);
          fs.mkdirSync(issue_dir);
        }
        issue_page_dir = path.join(issue_dir, "pages");
        if (!fs.existsSync(issue_page_dir)) {
          log.verbose("Creating " + issue_page_dir);
          fs.mkdirSync(issue_page_dir);
        }
        issue_covers_dir = path.join(issue_dir, "thumbnails");
        if (!fs.existsSync(issue_covers_dir)) {
          log.verbose("Creating " + issue_covers_dir);
          fs.mkdirSync(issue_covers_dir);
        }
        request(v.thumb).pipe(fs.createWriteStream(issue_dir + "/cover.png")).on('close', function() {});
        dest = path.join(issue_dir, "info.json");
        ou = JSON.stringify(v);
        results.push(cont = fs.writeFileSync(dest, ou));
      }
      return results;
    });
  };

  poolling = {
    process_issues: process_issues
  };

  module.exports = poolling;

}).call(this);
